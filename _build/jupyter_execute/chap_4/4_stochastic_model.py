#!/usr/bin/env python
# coding: utf-8

# # 確率モデル

# In[1]:


import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
import pandas as pd
import scipy as sp

# 日本語フォントの設定（Mac:'Hiragino Sans', Windows:'MS Gothic'）
plt.rcParams['font.family'] = 'Hiragino Sans'


# 本章では，確率モデルを扱う．
# 確率モデルとは，数理モデルの変数が確率変数となっているモデルであり，様々な自然現象や社会現象のモデル化に用いられる．
# 例えば，コイン投げは，表と裏が一定の確率で出るという数理モデルで記述することができ，最も基本的な確率モデルである．
# また，株価の変動は，毎時刻ごとに株価の上がり幅と下がり幅が確率的に決まるようなモデル（ランダムウォーク）によって記述することができる．

# ## 乱数の生成
# 
# 本節の内容は，文献{cite}`Odaka2018` を参考にしている．
# 
# 確率モデルをシミュレーションするためには，ランダムに変化する値を生成する必要がある．
# これを**乱数**と呼ぶ．

# ### 一様乱数の生成

# #### 乱数と疑似乱数
# 
# ある数列が与えられたとき，並び方に規則性や周期性がない場合，この数列の各要素を**乱数**と呼ぶ．
# 乱数を取得するにはいくつかの方法がある．
# 例えば，サイコロを振って出た目は乱数の一種である．
# また，カオスや量子力学的な性質を利用した乱数は**物理乱数**と呼ばれる．
# 
# 一方，コンピュータ上で乱数を使ったシミュレーションを行うためには，乱数生成アルゴリズムによって求めた乱数を用いる．
# この乱数は，完全にランダムな値ではなく，アルゴリズムが分かれば値を予測することができてしまうため，**疑似乱数**と呼ばれる．
# しかし，疑似乱数でもアルゴリズムを工夫すれば，十分にランダムに見える値を生成することができるため，乱数として扱うことができる．

# #### 線形合同法
# 
# 
# 
# ```{admonition} 線形合同法のアルゴリズム
# 1. 以下の条件を満たす整数 $ a, b, M $ を決める：
#    
#    $$
#     0 < a < M\\
#     0 \leq b < M
#    $$
#    
# 2. 乱数列の初期値 $ x_0 $ を決める（乱数の**シード**と呼ぶ）．
# 3. 以下の漸化式によって乱数列 $ \{x_n\} $ を生成する：
#     
#     $$
#     x_{n+1} = (ax_{n} + b) \% M
#     $$
#     
#     ※ $ \% $ は剰余を表す．
# 
# ```

# ### 任意の確率分布に従う乱数の生成

# #### 逆関数法

# ## 大数の法則と中心極限定理

# ### ベルヌーイ試行

# ### 二項分布

# ### 大数の法則

# ### 中心極限定理

# ## ランダムウォーク
